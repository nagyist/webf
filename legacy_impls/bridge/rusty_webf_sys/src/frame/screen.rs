// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
pub struct ScreenRustMethods {
  pub version: c_double,
  pub event_target: EventTargetRustMethods,
  pub avail_width: extern "C" fn(*const OpaquePtr) -> i64,
  pub avail_height: extern "C" fn(*const OpaquePtr) -> i64,
  pub width: extern "C" fn(*const OpaquePtr) -> i64,
  pub height: extern "C" fn(*const OpaquePtr) -> i64,
}
pub struct Screen {
  pub event_target: EventTarget,
  method_pointer: *const ScreenRustMethods,
}
impl Screen {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const ScreenRustMethods, status: *const RustValueStatus) -> Screen {
    unsafe {
      Screen {
        event_target: EventTarget::initialize(
          ptr,
          context,
          &(method_pointer).as_ref().unwrap().event_target,
          status,
        ),
        method_pointer,
      }
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.event_target.ptr()
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    self.event_target.context()
  }
  pub fn avail_width(&self) -> i64 {
    let value = unsafe {
      ((*self.method_pointer).avail_width)(self.ptr())
    };
    value
  }
  pub fn avail_height(&self) -> i64 {
    let value = unsafe {
      ((*self.method_pointer).avail_height)(self.ptr())
    };
    value
  }
  pub fn width(&self) -> i64 {
    let value = unsafe {
      ((*self.method_pointer).width)(self.ptr())
    };
    value
  }
  pub fn height(&self) -> i64 {
    let value = unsafe {
      ((*self.method_pointer).height)(self.ptr())
    };
    value
  }
}
pub trait ScreenMethods: EventTargetMethods {
  fn avail_width(&self) -> i64;
  fn avail_height(&self) -> i64;
  fn width(&self) -> i64;
  fn height(&self) -> i64;
  fn as_screen(&self) -> &Screen;
}
impl ScreenMethods for Screen {
  fn avail_width(&self) -> i64 {
    self.avail_width()
  }
  fn avail_height(&self) -> i64 {
    self.avail_height()
  }
  fn width(&self) -> i64 {
    self.width()
  }
  fn height(&self) -> i64 {
    self.height()
  }
  fn as_screen(&self) -> &Screen {
    self
  }
}
impl EventTargetMethods for Screen {
  fn add_event_listener(&self, type_: &str, callback: EventListenerCallback, options: &AddEventListenerOptions, exception_state: &ExceptionState) -> Result<(), String> {
    self.event_target.add_event_listener(type_, callback, options, exception_state)
  }
  fn remove_event_listener(&self, type_: &str, callback: EventListenerCallback, options: &EventListenerOptions, exception_state: &ExceptionState) -> Result<(), String> {
    self.event_target.remove_event_listener(type_, callback, options, exception_state)
  }
  fn dispatch_event(&self, event: &Event, exception_state: &ExceptionState) -> Result<bool, String> {
    self.event_target.dispatch_event(event, exception_state)
  }
  fn as_event_target(&self) -> &EventTarget {
    &self.event_target
  }
}
