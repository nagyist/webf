// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
pub struct CharacterDataRustMethods {
  pub version: c_double,
  pub node: NodeRustMethods,
  pub data: extern "C" fn(*const OpaquePtr) -> AtomicStringRef,
  pub set_data: extern "C" fn(*const OpaquePtr, value: *const c_char, *const OpaquePtr) -> bool,
  pub length: extern "C" fn(*const OpaquePtr) -> i64,
}
pub struct CharacterData {
  pub node: Node,
  method_pointer: *const CharacterDataRustMethods,
}
impl CharacterData {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const CharacterDataRustMethods, status: *const RustValueStatus) -> CharacterData {
    unsafe {
      CharacterData {
        node: Node::initialize(
          ptr,
          context,
          &(method_pointer).as_ref().unwrap().node,
          status,
        ),
        method_pointer,
      }
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.node.ptr()
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    self.node.context()
  }
  pub fn data(&self) -> String {
    let value = unsafe {
      ((*self.method_pointer).data)(self.ptr())
    };
    value.to_string()
  }
  pub fn set_data(&self, value: &str, exception_state: &ExceptionState) -> Result<(), String> {
    unsafe {
      ((*self.method_pointer).set_data)(self.ptr(), CString::new(value).unwrap().as_ptr(), exception_state.ptr)
    };
    if exception_state.has_exception() {
      return Err(exception_state.stringify(self.context()));
    }
    Ok(())
  }
  pub fn length(&self) -> i64 {
    let value = unsafe {
      ((*self.method_pointer).length)(self.ptr())
    };
    value
  }
}
pub trait CharacterDataMethods: NodeMethods {
  fn data(&self) -> String;
  fn set_data(&self, value: &str, exception_state: &ExceptionState) -> Result<(), String>;
  fn length(&self) -> i64;
  fn as_character_data(&self) -> &CharacterData;
}
impl CharacterDataMethods for CharacterData {
  fn data(&self) -> String {
    self.data()
  }
  fn set_data(&self, value: &str, exception_state: &ExceptionState) -> Result<(), String> {
    self.set_data(value, exception_state)
  }
  fn length(&self) -> i64 {
    self.length()
  }
  fn as_character_data(&self) -> &CharacterData {
    self
  }
}
impl NodeMethods for CharacterData {
  fn element_node(&self) -> f64 {
    self.node.element_node()
  }
  fn attribute_node(&self) -> f64 {
    self.node.attribute_node()
  }
  fn text_node(&self) -> f64 {
    self.node.text_node()
  }
  fn comment_node(&self) -> f64 {
    self.node.comment_node()
  }
  fn document_node(&self) -> f64 {
    self.node.document_node()
  }
  fn document_type_node(&self) -> f64 {
    self.node.document_type_node()
  }
  fn document_fragment_node(&self) -> f64 {
    self.node.document_fragment_node()
  }
  fn node_type(&self) -> f64 {
    self.node.node_type()
  }
  fn node_name(&self) -> String {
    self.node.node_name()
  }
  fn child_nodes(&self) -> NodeList {
    self.node.child_nodes()
  }
  fn first_child(&self) -> Node {
    self.node.first_child()
  }
  fn is_connected(&self) -> bool {
    self.node.is_connected()
  }
  fn last_child(&self) -> Node {
    self.node.last_child()
  }
  fn next_sibling(&self) -> Node {
    self.node.next_sibling()
  }
  fn owner_document(&self) -> Document {
    self.node.owner_document()
  }
  fn parent_element(&self) -> Element {
    self.node.parent_element()
  }
  fn parent_node(&self) -> Node {
    self.node.parent_node()
  }
  fn previous_sibling(&self) -> Node {
    self.node.previous_sibling()
  }
  fn has_child_nodes(&self, exception_state: &ExceptionState) -> Result<bool, String> {
    self.node.has_child_nodes(exception_state)
  }
  fn append_child(&self, new_node: &Node, exception_state: &ExceptionState) -> Result<Node, String> {
    self.node.append_child(new_node, exception_state)
  }
  fn clone_node(&self, deep: bool, exception_state: &ExceptionState) -> Result<Node, String> {
    self.node.clone_node(deep, exception_state)
  }
  fn contains(&self, other: &Node, exception_state: &ExceptionState) -> Result<bool, String> {
    self.node.contains(other, exception_state)
  }
  fn insert_before(&self, new_child: &Node, ref_child: &Node, exception_state: &ExceptionState) -> Result<Node, String> {
    self.node.insert_before(new_child, ref_child, exception_state)
  }
  fn is_equal_node(&self, other_node: &Node, exception_state: &ExceptionState) -> Result<bool, String> {
    self.node.is_equal_node(other_node, exception_state)
  }
  fn is_same_node(&self, other_node: &Node, exception_state: &ExceptionState) -> Result<bool, String> {
    self.node.is_same_node(other_node, exception_state)
  }
  fn remove_child(&self, old_child: &Node, exception_state: &ExceptionState) -> Result<Node, String> {
    self.node.remove_child(old_child, exception_state)
  }
  fn remove(&self, exception_state: &ExceptionState) -> Result<(), String> {
    self.node.remove(exception_state)
  }
  fn replace_child(&self, new_child: &Node, old_child: &Node, exception_state: &ExceptionState) -> Result<Node, String> {
    self.node.replace_child(new_child, old_child, exception_state)
  }
  fn as_node(&self) -> &Node {
    &self.node
  }
}
impl EventTargetMethods for CharacterData {
  fn add_event_listener(&self, type_: &str, callback: EventListenerCallback, options: &AddEventListenerOptions, exception_state: &ExceptionState) -> Result<(), String> {
    self.node.event_target.add_event_listener(type_, callback, options, exception_state)
  }
  fn remove_event_listener(&self, type_: &str, callback: EventListenerCallback, options: &EventListenerOptions, exception_state: &ExceptionState) -> Result<(), String> {
    self.node.event_target.remove_event_listener(type_, callback, options, exception_state)
  }
  fn dispatch_event(&self, event: &Event, exception_state: &ExceptionState) -> Result<bool, String> {
    self.node.event_target.dispatch_event(event, exception_state)
  }
  fn as_event_target(&self) -> &EventTarget {
    &self.node.event_target
  }
}
