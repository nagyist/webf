// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
pub struct HTMLDivElementRustMethods {
  pub version: c_double,
  pub html_element: HTMLElementRustMethods,
}
pub struct HTMLDivElement {
  pub html_element: HTMLElement,
  method_pointer: *const HTMLDivElementRustMethods,
}
impl HTMLDivElement {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const HTMLDivElementRustMethods, status: *const RustValueStatus) -> HTMLDivElement {
    unsafe {
      HTMLDivElement {
        html_element: HTMLElement::initialize(
          ptr,
          context,
          &(method_pointer).as_ref().unwrap().html_element,
          status,
        ),
        method_pointer,
      }
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.html_element.ptr()
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    self.html_element.context()
  }
}
pub trait HTMLDivElementMethods: HTMLElementMethods {
  fn as_html_div_element(&self) -> &HTMLDivElement;
}
impl HTMLDivElementMethods for HTMLDivElement {
  fn as_html_div_element(&self) -> &HTMLDivElement {
    self
  }
}
impl HTMLElementMethods for HTMLDivElement {
  fn offset_top(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.offset_top(exception_state)
  }
  fn offset_left(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.offset_left(exception_state)
  }
  fn offset_width(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.offset_width(exception_state)
  }
  fn offset_height(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.offset_height(exception_state)
  }
  fn click(&self, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.click(exception_state)
  }
  fn as_html_element(&self) -> &HTMLElement {
    &self.html_element
  }
}
impl ElementMethods for HTMLDivElement {
  fn id(&self) -> String {
    self.html_element.element.id()
  }
  fn set_id(&self, value: &str, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.set_id(value, exception_state)
  }
  fn class_name(&self) -> String {
    self.html_element.element.class_name()
  }
  fn set_class_name(&self, value: &str, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.set_class_name(value, exception_state)
  }
  fn dataset(&self) -> DOMStringMap {
    self.html_element.element.dataset()
  }
  fn name(&self, exception_state: &ExceptionState) -> String {
    self.html_element.element.name(exception_state)
  }
  fn set_name(&self, value: &str, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.set_name(value, exception_state)
  }
  fn attributes(&self) -> ElementAttributes {
    self.html_element.element.attributes()
  }
  fn style(&self) -> CSSStyleDeclaration {
    self.html_element.element.style()
  }
  fn client_height(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.element.client_height(exception_state)
  }
  fn client_left(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.element.client_left(exception_state)
  }
  fn client_top(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.element.client_top(exception_state)
  }
  fn client_width(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.element.client_width(exception_state)
  }
  fn outer_html(&self) -> String {
    self.html_element.element.outer_html()
  }
  fn inner_html(&self) -> String {
    self.html_element.element.inner_html()
  }
  fn set_inner_html(&self, value: &str, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.set_inner_html(value, exception_state)
  }
  fn owner_document(&self) -> Document {
    self.html_element.element.owner_document()
  }
  fn scroll_left(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.element.scroll_left(exception_state)
  }
  fn set_scroll_left(&self, value: f64, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.set_scroll_left(value, exception_state)
  }
  fn scroll_top(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.element.scroll_top(exception_state)
  }
  fn set_scroll_top(&self, value: f64, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.set_scroll_top(value, exception_state)
  }
  fn scroll_width(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.element.scroll_width(exception_state)
  }
  fn scroll_height(&self, exception_state: &ExceptionState) -> f64 {
    self.html_element.element.scroll_height(exception_state)
  }
  fn local_name(&self) -> String {
    self.html_element.element.local_name()
  }
  fn tag_name(&self) -> String {
    self.html_element.element.tag_name()
  }
  fn dir(&self, exception_state: &ExceptionState) -> String {
    self.html_element.element.dir(exception_state)
  }
  fn set_dir(&self, value: &str, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.set_dir(value, exception_state)
  }
  fn set_attribute(&self, qualified_name: &str, value: &str, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.set_attribute(qualified_name, value, exception_state)
  }
  fn remove_attribute(&self, qualified_name: &str, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.remove_attribute(qualified_name, exception_state)
  }
  fn has_attribute(&self, qualified_name: &str, exception_state: &ExceptionState) -> Result<bool, String> {
    self.html_element.element.has_attribute(qualified_name, exception_state)
  }
  fn get_bounding_client_rect(&self, exception_state: &ExceptionState) -> Result<BoundingClientRect, String> {
    self.html_element.element.get_bounding_client_rect(exception_state)
  }
  fn get_client_rects(&self, exception_state: &ExceptionState) -> Result<Vec<BoundingClientRect>, String> {
    self.html_element.element.get_client_rects(exception_state)
  }
  fn get_elements_by_class_name(&self, class_name: &str, exception_state: &ExceptionState) -> Result<Vec<Element>, String> {
    self.html_element.element.get_elements_by_class_name(class_name, exception_state)
  }
  fn get_elements_by_tag_name(&self, tag_name: &str, exception_state: &ExceptionState) -> Result<Vec<Element>, String> {
    self.html_element.element.get_elements_by_tag_name(tag_name, exception_state)
  }
  fn query_selector(&self, selectors: &str, exception_state: &ExceptionState) -> Result<Element, String> {
    self.html_element.element.query_selector(selectors, exception_state)
  }
  fn query_selector_all(&self, selectors: &str, exception_state: &ExceptionState) -> Result<Vec<Element>, String> {
    self.html_element.element.query_selector_all(selectors, exception_state)
  }
  fn matches(&self, selectors: &str, exception_state: &ExceptionState) -> Result<bool, String> {
    self.html_element.element.matches(selectors, exception_state)
  }
  fn closest(&self, selectors: &str, exception_state: &ExceptionState) -> Result<Element, String> {
    self.html_element.element.closest(selectors, exception_state)
  }
  fn scroll(&self, x: f64, y: f64, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.scroll(x, y, exception_state)
  }
  fn scroll_with_options(&self, options: &ScrollToOptions, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.scroll_with_options(options, exception_state)
  }
  fn scroll_by(&self, x: f64, y: f64, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.scroll_by(x, y, exception_state)
  }
  fn scroll_by_with_options(&self, options: &ScrollToOptions, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.scroll_by_with_options(options, exception_state)
  }
  fn scroll_to(&self, x: f64, y: f64, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.scroll_to(x, y, exception_state)
  }
  fn scroll_to_with_options(&self, options: &ScrollToOptions, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.scroll_to_with_options(options, exception_state)
  }
  fn to_blob(&self, exception_state: &ExceptionState) -> WebFNativeFuture<Vec<u8>> {
    self.html_element.element.to_blob(exception_state)
  }
  fn to_blob_with_device_pixel_ratio(&self, device_pixel_ratio: f64, exception_state: &ExceptionState) -> WebFNativeFuture<Vec<u8>> {
    self.html_element.element.to_blob_with_device_pixel_ratio(device_pixel_ratio, exception_state)
  }
  fn test_global_to_local(&self, x: f64, y: f64, exception_state: &ExceptionState) -> Result<NativeValue, String> {
    self.html_element.element.test_global_to_local(x, y, exception_state)
  }
  fn as_element(&self) -> &Element {
    &self.html_element.element
  }
}
impl NodeMethods for HTMLDivElement {
  fn element_node(&self) -> f64 {
    self.html_element.element.node.element_node()
  }
  fn attribute_node(&self) -> f64 {
    self.html_element.element.node.attribute_node()
  }
  fn text_node(&self) -> f64 {
    self.html_element.element.node.text_node()
  }
  fn comment_node(&self) -> f64 {
    self.html_element.element.node.comment_node()
  }
  fn document_node(&self) -> f64 {
    self.html_element.element.node.document_node()
  }
  fn document_type_node(&self) -> f64 {
    self.html_element.element.node.document_type_node()
  }
  fn document_fragment_node(&self) -> f64 {
    self.html_element.element.node.document_fragment_node()
  }
  fn node_type(&self) -> f64 {
    self.html_element.element.node.node_type()
  }
  fn node_name(&self) -> String {
    self.html_element.element.node.node_name()
  }
  fn child_nodes(&self) -> NodeList {
    self.html_element.element.node.child_nodes()
  }
  fn first_child(&self) -> Node {
    self.html_element.element.node.first_child()
  }
  fn is_connected(&self) -> bool {
    self.html_element.element.node.is_connected()
  }
  fn last_child(&self) -> Node {
    self.html_element.element.node.last_child()
  }
  fn next_sibling(&self) -> Node {
    self.html_element.element.node.next_sibling()
  }
  fn owner_document(&self) -> Document {
    self.html_element.element.node.owner_document()
  }
  fn parent_element(&self) -> Element {
    self.html_element.element.node.parent_element()
  }
  fn parent_node(&self) -> Node {
    self.html_element.element.node.parent_node()
  }
  fn previous_sibling(&self) -> Node {
    self.html_element.element.node.previous_sibling()
  }
  fn has_child_nodes(&self, exception_state: &ExceptionState) -> Result<bool, String> {
    self.html_element.element.node.has_child_nodes(exception_state)
  }
  fn append_child(&self, new_node: &Node, exception_state: &ExceptionState) -> Result<Node, String> {
    self.html_element.element.node.append_child(new_node, exception_state)
  }
  fn clone_node(&self, deep: bool, exception_state: &ExceptionState) -> Result<Node, String> {
    self.html_element.element.node.clone_node(deep, exception_state)
  }
  fn contains(&self, other: &Node, exception_state: &ExceptionState) -> Result<bool, String> {
    self.html_element.element.node.contains(other, exception_state)
  }
  fn insert_before(&self, new_child: &Node, ref_child: &Node, exception_state: &ExceptionState) -> Result<Node, String> {
    self.html_element.element.node.insert_before(new_child, ref_child, exception_state)
  }
  fn is_equal_node(&self, other_node: &Node, exception_state: &ExceptionState) -> Result<bool, String> {
    self.html_element.element.node.is_equal_node(other_node, exception_state)
  }
  fn is_same_node(&self, other_node: &Node, exception_state: &ExceptionState) -> Result<bool, String> {
    self.html_element.element.node.is_same_node(other_node, exception_state)
  }
  fn remove_child(&self, old_child: &Node, exception_state: &ExceptionState) -> Result<Node, String> {
    self.html_element.element.node.remove_child(old_child, exception_state)
  }
  fn remove(&self, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.node.remove(exception_state)
  }
  fn replace_child(&self, new_child: &Node, old_child: &Node, exception_state: &ExceptionState) -> Result<Node, String> {
    self.html_element.element.node.replace_child(new_child, old_child, exception_state)
  }
  fn as_node(&self) -> &Node {
    &self.html_element.element.node
  }
}
impl EventTargetMethods for HTMLDivElement {
  fn add_event_listener(&self, type_: &str, callback: EventListenerCallback, options: &AddEventListenerOptions, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.node.event_target.add_event_listener(type_, callback, options, exception_state)
  }
  fn remove_event_listener(&self, type_: &str, callback: EventListenerCallback, options: &EventListenerOptions, exception_state: &ExceptionState) -> Result<(), String> {
    self.html_element.element.node.event_target.remove_event_listener(type_, callback, options, exception_state)
  }
  fn dispatch_event(&self, event: &Event, exception_state: &ExceptionState) -> Result<bool, String> {
    self.html_element.element.node.event_target.dispatch_event(event, exception_state)
  }
  fn as_event_target(&self) -> &EventTarget {
    &self.html_element.element.node.event_target
  }
}
