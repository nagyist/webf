// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
enum CanvasGradientType {
  CanvasGradient = 0,
}
#[repr(C)]
pub struct CanvasGradientRustMethods {
  pub version: c_double,
  pub add_color_stop: extern "C" fn(*const OpaquePtr, c_double, *const c_char, *const OpaquePtr) -> c_void,
  pub release: extern "C" fn(*const OpaquePtr) -> c_void,
  pub dynamic_to: extern "C" fn(*const OpaquePtr, type_: CanvasGradientType) -> RustValue<c_void>,
}
pub struct CanvasGradient {
  pub ptr: *const OpaquePtr,
  context: *const ExecutingContext,
  method_pointer: *const CanvasGradientRustMethods,
  status: *const RustValueStatus
}
impl CanvasGradient {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const CanvasGradientRustMethods, status: *const RustValueStatus) -> CanvasGradient {
    CanvasGradient {
      ptr,
      context,
      method_pointer,
      status
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.ptr
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    assert!(!self.context.is_null(), "Context PTR must not be null");
    unsafe { &*self.context }
  }
  pub fn add_color_stop(&self, offset: f64, color: &str, exception_state: &ExceptionState) -> Result<(), String> {
    unsafe {
      ((*self.method_pointer).add_color_stop)(self.ptr(), offset, CString::new(color).unwrap().as_ptr(), exception_state.ptr);
    };
    if exception_state.has_exception() {
      return Err(exception_state.stringify(self.context()));
    }
    Ok(())
  }
}
impl Drop for CanvasGradient {
  fn drop(&mut self) {
    unsafe {
      ((*self.method_pointer).release)(self.ptr());
    }
  }
}
pub trait CanvasGradientMethods {
  fn add_color_stop(&self, offset: f64, color: &str, exception_state: &ExceptionState) -> Result<(), String>;
  fn as_canvas_gradient(&self) -> &CanvasGradient;
}
impl CanvasGradientMethods for CanvasGradient {
  fn add_color_stop(&self, offset: f64, color: &str, exception_state: &ExceptionState) -> Result<(), String> {
    self.add_color_stop(offset, color, exception_state)
  }
  fn as_canvas_gradient(&self) -> &CanvasGradient {
    self
  }
}
