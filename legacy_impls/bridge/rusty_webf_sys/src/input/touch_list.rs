// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
enum TouchListType {
  TouchList = 0,
}
#[repr(C)]
pub struct TouchListRustMethods {
  pub version: c_double,
  pub length: extern "C" fn(*const OpaquePtr) -> c_double,
  pub item: extern "C" fn(*const OpaquePtr, c_double, *const OpaquePtr) -> RustValue<TouchRustMethods>,
  pub release: extern "C" fn(*const OpaquePtr) -> c_void,
  pub dynamic_to: extern "C" fn(*const OpaquePtr, type_: TouchListType) -> RustValue<c_void>,
}
pub struct TouchList {
  pub ptr: *const OpaquePtr,
  context: *const ExecutingContext,
  method_pointer: *const TouchListRustMethods,
  status: *const RustValueStatus
}
impl TouchList {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const TouchListRustMethods, status: *const RustValueStatus) -> TouchList {
    TouchList {
      ptr,
      context,
      method_pointer,
      status
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.ptr
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    assert!(!self.context.is_null(), "Context PTR must not be null");
    unsafe { &*self.context }
  }
  pub fn length(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).length)(self.ptr())
    };
    value
  }
  pub fn item(&self, index: f64, exception_state: &ExceptionState) -> Result<Touch, String> {
    let value = unsafe {
      ((*self.method_pointer).item)(self.ptr(), index, exception_state.ptr)
    };
    if exception_state.has_exception() {
      return Err(exception_state.stringify(self.context()));
    }
    Ok(Touch::initialize(value.value, self.context(), value.method_pointer, value.status))
  }
}
impl Drop for TouchList {
  fn drop(&mut self) {
    unsafe {
      ((*self.method_pointer).release)(self.ptr());
    }
  }
}
pub trait TouchListMethods {
  fn length(&self) -> f64;
  fn item(&self, index: f64, exception_state: &ExceptionState) -> Result<Touch, String>;
  fn as_touch_list(&self) -> &TouchList;
}
impl TouchListMethods for TouchList {
  fn length(&self) -> f64 {
    self.length()
  }
  fn item(&self, index: f64, exception_state: &ExceptionState) -> Result<Touch, String> {
    self.item(index, exception_state)
  }
  fn as_touch_list(&self) -> &TouchList {
    self
  }
}
