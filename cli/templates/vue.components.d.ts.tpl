/*
 * Generated by TSDL, don't edit this file directly.
 */
// Based on the Vue 3 documentation for defining custom elements:
// https://vuejs.org/guide/extras/web-components
import { EmitFn, PublicProps, HTMLAttributes } from 'vue';

type EventMap = {
  [event: string]: Event
}

// This maps an EventMap to the format that Vue's $emit type expects.
type VueEmit<T extends EventMap> = EmitFn<{
  [K in keyof T]: (event: T[K]) => void
}>

// Vue 3 event listener properties for template usage
type VueEventListeners<T extends EventMap> = {
  [K in keyof T as `on${Capitalize<string & K>}`]?: (event: T[K]) => any
}

type DefineCustomElement<
  ElementType,
  Events extends EventMap = {},
  SelectedAttributes extends keyof ElementType = keyof ElementType
> = new () => ElementType & VueEventListeners<Events> & {
  // Use $props to define the properties exposed to template type checking. Vue
  // specifically reads prop definitions from the `$props` type. Note that we
  // combine the element's props with the global HTML props and Vue's special
  // props.
  /** @deprecated Do not use the $props property on a Custom Element ref,
    this is for template prop types only. */
  $props: Partial<Pick<ElementType, SelectedAttributes>> & PublicProps & VueEventListeners<Events>

  // Use $emit to specifically define event types. Vue specifically reads event
  // types from the `$emit` type. Note that `$emit` expects a particular format
  // that we map `Events` to.
  /** @deprecated Do not use the $emit property on a Custom Element ref,
    this is for template prop types only. */
  $emit: VueEmit<Events>
}

<%= components %>

declare module 'vue' {
  interface GlobalComponents {
    <% componentMetas.forEach(comp => { %>
    '<%= comp.tagName %>': DefineCustomElement<
      <%= comp.className %>Props,
      <%= comp.className %>Events
    >
    <% }) %>
  }
}
