/*
 * Generated by TSDL, don't edit this file directly.
 */
// Based on the Vue 3 documentation for defining custom elements:
// https://vuejs.org/guide/extras/web-components
import { EmitFn, PublicProps, HTMLAttributes } from 'vue';
type EventMap = {
  [event: string]: Event
}
// This maps an EventMap to the format that Vue's $emit type expects.
type VueEmit<T extends EventMap> = EmitFn<{
  [K in keyof T]: (event: T[K]) => void
}>
// Vue 3 event listener properties for template usage
type VueEventListeners<T extends EventMap> = {
  [K in keyof T as `on${Capitalize<string & K>}`]?: (event: T[K]) => any
}
type DefineCustomElement<
  ElementType,
  Events extends EventMap = {},
  SelectedAttributes extends keyof ElementType = keyof ElementType
> = new () => ElementType & VueEventListeners<Events> & {
  // Use $props to define the properties exposed to template type checking. Vue
  // specifically reads prop definitions from the `$props` type. Note that we
  // combine the element's props with the global HTML props and Vue's special
  // props.
  /** @deprecated Do not use the $props property on a Custom Element ref,
    this is for template prop types only. */
  $props: Partial<Pick<ElementType, SelectedAttributes>> & PublicProps & VueEventListeners<Events>
  // Use $emit to specifically define event types. Vue specifically reads event
  // types from the `$emit` type. Note that `$emit` expects a particular format
  // that we map `Events` to.
  /** @deprecated Do not use the $emit property on a Custom Element ref,
    this is for template prop types only. */
  $emit: VueEmit<Events>
}
export type WebFTextProps = {
  'id'?: string;
  'class'?: string;
  'style'?: string | Record<string, any>;
}
export interface WebFTextElement {
}
export type WebFTextEvents = {
}
export type WebFTableRowProps = {
  'id'?: string;
  'class'?: string;
  'style'?: string | Record<string, any>;
}
export interface WebFTableRowElement {
}
export type WebFTableRowEvents = {
}
export type WebFTableHeaderProps = {
  'sticky'?: boolean;
  'id'?: string;
  'class'?: string;
  'style'?: string | Record<string, any>;
}
export interface WebFTableHeaderElement {
  sticky?: boolean;
}
export type WebFTableHeaderEvents = {
}
export type WebFTableCellProps = {
  'vertical-alignment'?: top;
  'column-width'?: number;
  'id'?: string;
  'class'?: string;
  'style'?: string | Record<string, any>;
}
export interface WebFTableCellElement {
  verticalAlignment?: top;
  columnWidth?: number;
}
export type WebFTableCellEvents = {
}
export type WebFTableProps = {
  'text-direction'?: ltr;
  'default-vertical-alignment'?: top;
  'default-column-width'?: number;
  'column-widths'?: string;
  'border'?: string;
  'text-baseline'?: alphabetic;
  'id'?: string;
  'class'?: string;
  'style'?: string | Record<string, any>;
}
export interface WebFTableElement {
  textDirection?: ltr;
  defaultVerticalAlignment?: top;
  defaultColumnWidth?: number;
  columnWidths?: string;
  border?: string;
  textBaseline?: alphabetic;
}
export type WebFTableEvents = {
}
export type WebFListViewProps = {
  'shrink-wrap'?: boolean;
  'id'?: string;
  'class'?: string;
  'style'?: string | Record<string, any>;
}
export interface WebFListViewElement {
  shrinkWrap?: boolean;
}
export type WebFListViewEvents = {
  refresh?: Event;
  loadmore?: Event;
}
export type FlutterShimmerTextProps = {
  'id'?: string;
  'class'?: string;
  'style'?: string | Record<string, any>;
}
export interface FlutterShimmerTextElement {
}
export type FlutterShimmerTextEvents = {
}
export type FlutterShimmerButtonProps = {
  'width'?: string;
  'height'?: string;
  'radius'?: string;
  'id'?: string;
  'class'?: string;
  'style'?: string | Record<string, any>;
}
export interface FlutterShimmerButtonElement {
  width?: string;
  height?: string;
  radius?: string;
}
export type FlutterShimmerButtonEvents = {
}
export type FlutterShimmerAvatarProps = {
  'id'?: string;
  'class'?: string;
  'style'?: string | Record<string, any>;
}
export interface FlutterShimmerAvatarElement {
}
export type FlutterShimmerAvatarEvents = {
}
export type FlutterShimmerProps = {
  'id'?: string;
  'class'?: string;
  'style'?: string | Record<string, any>;
}
export interface FlutterShimmerElement {
}
export type FlutterShimmerEvents = {
}
declare module 'vue' {
  interface GlobalComponents {
    'WebFText': DefineCustomElement<
      WebFTextProps,
      WebFTextEvents
    >
    'WebFTableRow': DefineCustomElement<
      WebFTableRowProps,
      WebFTableRowEvents
    >
    'WebFTableHeader': DefineCustomElement<
      WebFTableHeaderProps,
      WebFTableHeaderEvents
    >
    'WebFTableCell': DefineCustomElement<
      WebFTableCellProps,
      WebFTableCellEvents
    >
    'WebFTable': DefineCustomElement<
      WebFTableProps,
      WebFTableEvents
    >
    'WebFListView': DefineCustomElement<
      WebFListViewProps,
      WebFListViewEvents
    >
    'FlutterShimmerText': DefineCustomElement<
      FlutterShimmerTextProps,
      FlutterShimmerTextEvents
    >
    'FlutterShimmerButton': DefineCustomElement<
      FlutterShimmerButtonProps,
      FlutterShimmerButtonEvents
    >
    'FlutterShimmerAvatar': DefineCustomElement<
      FlutterShimmerAvatarProps,
      FlutterShimmerAvatarEvents
    >
    'FlutterShimmer': DefineCustomElement<
      FlutterShimmerProps,
      FlutterShimmerEvents
    >
  }
}